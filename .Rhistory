start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(business, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(ChannelNewsAsia, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(ChannelNewsAsia, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(ChannelNewsAsia, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derspiegel, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derspiegel, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derspiegel, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derStandardat, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derStandardat, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derStandardat, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derStandardat, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(derStandardat, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(DRkoncern, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(DRkoncern, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(el_pais, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(el_pais, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(el_pais, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(Estadao, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(Estadao, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(Estadao, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(Estadao, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(FiguresCC, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(geglobo, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(geglobo, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(geglobo, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(guardian, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(guardian, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(guardian, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(guardian, start, end)
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(hsfi, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(hsfi, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(hsfi, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(hsfi, start, end)
# set increments for opening browsers
increment <- 50 # how many URLs would you like to open at a time?
# set increments for opening browsers
increment <- 50 # how many URLs would you like to open at a time?
start <- 1 # start index
end <- start + (increment - 1) # end index
View(LANACION)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(LANACION start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(LANACION, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(LANACION, start, end)
# set increments for opening browsers
increment <- 50 # how many URLs would you like to open at a time?
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(latimes, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(latimes, start, end)
# set increments for opening browsers
increment <- 50 # how many URLs would you like to open at a time?
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(NatGeo, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(nature, start, end)
# set increments for opening browsers
increment <- 50 # how many URLs would you like to open at a time?
start <- 1 # start index
end <- start + (increment - 1) # end index
# set increments for opening browsers
increment <- 40 # how many URLs would you like to open at a time?
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(nytimes, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(nytimes, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(nytimes, start, end)
# set increments for opening browsers
increment <- 50 # how many URLs would you like to open at a time?
start <- 1 # start index
end <- start + (increment - 1) # end index
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(Reuters, start, end)
# run function
# NOTE: replace first parameter with name of source (e.g. globeandmail, or CivilBeat, etc.) — use names in the Environment window (top right corner) as a guide. Variable names are case sensitive!
# After you finish a source, run lines 19-21 to reset your start and end indices!
open(Reuters, start, end)
Sys.date()
Sys.Date()
today <- Sys.Date()
library(googlesheets4) # for interfacing with data stored in Google Sheets
library(dplyr) # data wrangling
?read_sheet
library(tidyRSS) # for reading RSS feeds
rss_feeds <- read_sheet(ss) # reading in sheet
# storing Google Sheet URL containng RSS feeds
ss <- "https://docs.google.com/spreadsheets/d/1YH1gRthVQjP33tTPxp4PAxlZSqzjfMo3b2-k2PjGqpM/edit?usp=sharing"
rss_feeds <- read_sheet(ss) # reading in sheet
View(rss_feeds)
print(feed)
lapply(rss_feeds, function(feed) {
print(feed)
})
# storing Google Sheet URL containng RSS feeds
ss <- "https://docs.google.com/spreadsheets/d/1YH1gRthVQjP33tTPxp4PAxlZSqzjfMo3b2-k2PjGqpM/edit?usp=sharing"
rss_feeds <- read_sheet(ss) # reading in sheet
# storing Google Sheet URL containng RSS feeds
ss <- "https://docs.google.com/spreadsheets/d/1YH1gRthVQjP33tTPxp4PAxlZSqzjfMo3b2-k2PjGqpM/edit?usp=sharing"
rss_feeds <- read_sheet(ss) # reading in sheet
lapply(rss_feeds, function(feed) {
print(feed)
})
lapply(rss_feeds, function(feed) {
print(feed$rss)
})
print(feed[rss])
lapply(rss_feeds, function(feed) {
print(feed[rss])
})
lapply(rss_feeds, function(feed) {
print(feed["rss"])
})
View(rss_feeds)
print(feed[["rss"]])
lapply(rss_feeds, function(feed) {
print(feed[["rss"]])
})
lapply(rss_feeds, function(feed) {
print(feed[1])
})
lapply(rss_feeds, function(feed) {
print(feed[, 1])
})
lapply(rss_feeds, function(feed) {
print(feed[, 2])
})
# define target folder where feeds should be saved
target_folder <- paste0("data/raw/study1/rawfeeds/", today)
# define target folder where feeds should be saved
target_folder <- paste0("data/raw/study1/raw_feeds/", today)
# this code loops over each feed, and opens article links in those feeds in a set increment
for (feed in object_names) {
print(paste0("Starting: ", feed))
df <- get(feed) # storing table in empty data frame
increment <- 20 # number of tabs to open
start <- 1 # start index
if (nrow(df) < increment) {
end <- nrow(df)
} else {
end <- increment
}
while (start < nrow(df)) {
sliced <- df %>%
slice(start:end)
lapply(sliced$item_link, browseURL)
readline(prompt = paste0("Press [enter] to load next ", increment, " tabs in ", feed))
start <- start + increment
end <- end + increment
if (end > nrow(df)) {
end <- nrow(df)
print("Last round!")
}
}
}
source('~/Documents/CGSAL/RSVS/scripts/09_study1_datacollection_pt2.R')
source('~/Documents/CGSAL/RSVS/scripts/09_study1_datacollection_pt2.R')
# this code loops over each feed, and opens article links in those feeds in a set increment
for (feed in object_names) {
print(paste0("Starting: ", feed))
df <- get(feed) # storing table in empty data frame
increment <- 20 # number of tabs to open
start <- 1 # start index
if (nrow(df) < increment) {
end <- nrow(df)
} else {
end <- increment
}
while (start < nrow(df)) {
sliced <- df %>%
slice(start:end)
lapply(sliced$item_link, browseURL)
readline(prompt = paste0("Press [enter] to continue."))
start <- start + increment
end <- end + increment
if (end > nrow(df)) {
end <- nrow(df)
print("Last round!")
}
}
}
# this code loops over each feed, and opens article links in those feeds in a set increment
for (feed in object_names) {
print(paste0("Starting: ", feed))
df <- get(feed) # storing table in empty data frame
increment <- 20 # number of tabs to open
start <- 1 # start index
if (nrow(df) < increment) {
end <- nrow(df)
} else {
end <- increment
}
while (start < nrow(df)) {
sliced <- df %>%
slice(start:end)
lapply(sliced$item_link, browseURL)
readline(prompt = paste0("Press [enter] to continue."))
start <- start + increment
end <- end + increment
if (end > nrow(df)) {
end <- nrow(df)
print("Last round!")
}
}
}
source('~/Documents/CGSAL/RSVS/scripts/09_study1_datacollection_pt2.R')
source('~/Documents/CGSAL/RSVS/scripts/08_study1_datacollection_pt1.R')
library(dplyr)
library(googlesheets4)
# input Google Sheet
?read_sheet
?write_sheet
ss <- "https://docs.google.com/spreadsheets/d/1vg1N83tw0_s9dcCf7amnF-1NGahtIv1sO9o-grRWXiA/edit#gid=0"
file_list <- list.files("data/raw/study1/raw_feeds/2021-05-04")
file_list <- list.files("data/raw/study1/raw_feeds/2021-05-03")
file_path <- "data/raw/study1/raw_feeds/"
?assign
?write_sheet
?mutate
Sys.date()
Sys.Date()
# start date is in format "YYYY-MM-DD" (unless your system prints dates differently — check your folder names to confirm)
initial_write("2021-05-03")
initial_write <- function(start_date) {
file_list <- list.files(paste0(file_path, start_date), pattern = "*.csv")
lapply(file_list, function(file) {
temp_df <- read.csv(paste0(file_path, start_date, file)) %>%
mutate(collection_date = start_date)
temp_df <- temp_df[c(ncol(temp_df), 1:(ncol(temp_df)-1))] # reordering columns to place year column first
tab_name <- substr(file, 1, nchar(file) - 4) # cutting ".csv" from file name to serve as tab name
write_sheet(temp_df, ss, tab_name) # writing sheet to Google Sheets file
})
}
# start date is in format "YYYY-MM-DD" (unless your system prints dates differently — check your folder names to confirm)
initial_write("2021-05-03")
start_date <- "2021-05-03"
file_list <- list.files(paste0(file_path, start_date), pattern = "*.csv")
lapply(file_list, function(file) {
temp_df <- read.csv(paste0(file_path, start_date, file)) %>%
mutate(collection_date = start_date)
temp_df <- temp_df[c(ncol(temp_df), 1:(ncol(temp_df)-1))] # reordering columns to place year column first
tab_name <- substr(file, 1, nchar(file) - 4) # cutting ".csv" from file name to serve as tab name
write_sheet(temp_df, ss, tab_name) # writing sheet to Google Sheets file
})
lapply(file_list, function(file) {
print(file)
# temp_df <- read.csv(paste0(file_path, start_date, file)) %>%
#   mutate(collection_date = start_date)
# temp_df <- temp_df[c(ncol(temp_df), 1:(ncol(temp_df)-1))] # reordering columns to place year column first
# tab_name <- substr(file, 1, nchar(file) - 4) # cutting ".csv" from file name to serve as tab name
# write_sheet(temp_df, ss, tab_name) # writing sheet to Google Sheets file
})
initial_write <- function(start_date) {
file_list <- list.files(paste0(file_path, start_date), pattern = "*.csv")
lapply(file_list, function(file) {
temp_df <- read.csv(paste0(file_path, start_date, "/", file)) %>%
mutate(collection_date = start_date)
temp_df <- temp_df[c(ncol(temp_df), 1:(ncol(temp_df)-1))] # reordering columns to place year column first
tab_name <- substr(file, 1, nchar(file) - 4) # cutting ".csv" from file name to serve as tab name
write_sheet(temp_df, ss, tab_name) # writing sheet to Google Sheets file
})
}
# start date is in format "YYYY-MM-DD" (unless your system prints dates differently — check your folder names to confirm)
initial_write("2021-05-03")
rlang::last_error()
test <- read.csv(paste0(file_path, start_date, "/propublica.csv"))
test <- test[c(ncol(test), 1:(ncol(test)-1))]
View(test)
test <- read.csv(paste0(file_path, start_date, "/propublica.csv")) %>%
mutate(collection_date = start_date)
test <- test[c(ncol(test), 1:(ncol(test)-1))]
tab_name <- substr(file, 1, nchar(file) - 4)
write_sheet(test, ss, "propublica")
sapply(test, gsub("\\s+"," "))
sapply(test, gsub("\\s+"," ",test))
test <- gsub("\\s+"," ",test)
test <- read.csv(paste0(file_path, start_date, "/propublica.csv")) %>%
mutate(collection_date = start_date)
test <- gsub("\\s+"," ",test)
test <- read.csv(paste0(file_path, start_date, "/propublica.csv")) %>%
mutate(collection_date = start_date)
apply(test, function(x) {
gsub("\\s+"," ", x))
})
apply(test, function(x) {
gsub("\\s+"," ", x)
})
apply(test, 2, function(x) {
gsub("\\s+"," ", x)
})
View(test)
View(test)
test <- test[c(ncol(test), 1:(ncol(test)-1))]
write_sheet(test, ss, "propublica")
ss <- "https://docs.google.com/spreadsheets/d/1vg1N83tw0_s9dcCf7amnF-1NGahtIv1sO9o-grRWXiA/edit#gid=0"
file_path <- "data/raw/study1/raw_feeds/"
start_date <- "2021-05-03"
library(dplyr)
library(googlesheets4)
test <- read.csv(paste0(file_path, start_date, "/propublica.csv")) %>%
mutate(collection_date = start_date)
apply(test, 2, function(x) {
gsub("\\s+"," ", x)
})
test <- test[c(ncol(test), 1:(ncol(test)-1))]
write_sheet(test, ss, "propublica")
test <- apply(test, 2, function(x) {
gsub("\\s+"," ", x)
})
test <- test[c(ncol(test), 1:(ncol(test)-1))]
write_sheet(test, ss, "propublica")
apply(test, 2, function(x) {
gsub("\\s+"," ", x)
})
?apply
test <- read.csv(paste0(file_path, start_date, "/propublica.csv")) %>%
mutate(collection_date = start_date)
apply(test, 2, function(x) {
gsub("\\s+"," ", x)
})
nchar(test$item_description[1])
nchar(test$item_description[2])
nchar(test$item_description[3])
nchar(test$item_description[4])
nchar(test$item_description[5])
nchar(test$item_description[6])
nchar(test$item_description)
nchar(test
)
source('~/Documents/CGSAL/RSVS/scripts/11_study1_datacollection_pt3.R')
?read.csv
file_list <- list.files(paste0(file_path, start_date), pattern = "*.csv")
initial_write <- function(start_date) {
file_list <- list.files(paste0(file_path, start_date), pattern = "*.csv")
lapply(file_list, function(file) {
temp_df <- read.csv(paste0(file_path, start_date, "/", file)) %>%
mutate(collection_date = start_date) %>%
select(-c("item_description"))
row.names(temp_df) <- NULL
temp_df <- temp_df[c(ncol(temp_df), 1:(ncol(temp_df)-1))] # reordering columns to place year column first
tab_name <- substr(file, 1, nchar(file) - 4) # cutting ".csv" from file name to serve as tab name
write_sheet(temp_df, ss, tab_name) # writing sheet to Google Sheets file
})
}
# start date is in format "YYYY-MM-DD" (unless your system prints dates differently — check your folder names to confirm)
initial_write("2021-05-03")
test <- read.csv(paste0(file_path, start_date, "/propublica.csv"))
View(test)
View(test)
source('~/Documents/CGSAL/RSVS/scripts/11_study1_datacollection_pt3.R')
df <- read_sheet(ss) # reading in Google Sheet
df <- read_sheet(ss, sheet = 1) # reading in Google Sheet
collected_dates <- unique(df$collection_date)
all_dates <- list.files(file_path)
todo_dates <- !(all_dates %in% uploaded_dates)
uploaded_dates <- unique(df$collection_date) # creating character vector of all dates that have been uploaded
todo_dates <- !(all_dates %in% uploaded_dates)
todo_dates <- all_dates[!(all_dates %in% uploaded_dates)]
?append_sheet
